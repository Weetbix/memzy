{"version":3,"sources":["components/Card.js","components/Grid.js","components/WinnerScreen.js","reducer.js","App.js","index.js"],"names":["flipAnimation","keyframes","unflipAnimation","Card","styled","button","props","imgUrl","process","type","flipped","propTypes","PropTypes","number","isRequired","bool","Grid","div","width","height","WinnerScreen","Component","onClick","createInitalState","numberOfCards","cardsPerSet","Error","cards","i","push","id","matched","shuffle","interactive","reducer","state","action","map","card","newState","flippedCards","filter","cardsDontMatch","every","allCardsInSetFlipped","Page","App","useReducer","GRID_WIDTH","dispatch","key","a","Promise","resolve","setTimeout","disabled","gameOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2411ff7.chunk.js","sourcesContent":["import styled, { keyframes } from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst flipAnimation = keyframes`\n  0% {\n    transform: scaleX(1.0);\n    background-image: none\n  }\n  50% {\n    transform: scaleX(0);\n    background-image: reset;\n  }\n  0% {\n    transform: scaleX(1.0);\n  }\n`;\n\nconst unflipAnimation = keyframes`\n  0% {\n    transform: scaleX(1.0);\n  }\n  50% {\n    transform: scaleX(0);\n    background-image: none;\n  }\n  0% {\n    transform: scaleX(1.0);\n  }\n`;\n\nconst Card = styled.button`\n  margin: 20px;\n  width: 100px;\n  height: 100px;\n  border-radius: 100px;\n  border-color: rgba(0, 0, 0, 0.1);\n  border-width: 1px;\n\n  background-color: white;\n  background-image: url(${(props) => {\n    const imgUrl = `${process.env.PUBLIC_URL}/cards/${props.type}.svg`;\n    return props.flipped ? imgUrl : null;\n  }});\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center;\n  box-shadow: 5px 5px 10px 1px rgba(0, 0, 0, 0.3);\n\n  animation-name: ${(props) =>\n    props.flipped ? flipAnimation : unflipAnimation};\n  animation-duration: 0.2s;\n  animation-iteration-count: 1;\n\n  :focus {\n    outline: 0;\n  }\n  :hover {\n    transform: scale(1.05);\n  }\n`;\n\nCard.propTypes = {\n  type: PropTypes.number.isRequired,\n  flipped: PropTypes.bool.isRequired,\n};\n\nexport default Card;\n","import styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${(props) => props.width}, 140px);\n  grid-template-rows: repeat(${(props) => props.height}, 140px);\n`;\n\nGrid.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default Grid;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst WinnerScreen = styled.div`\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.9);\n\n  font-family: sans-serif;\n  font-size: 35px;\n  font-weight: lighter;\n  color: #444;\n\n  button {\n    border-style: none;\n    background-color: transparent;\n    font-size: 35px;\n    margin: 0;\n    padding: 0;\n    color: #b5dc1e;\n    text-decoration: underline;\n  }\n`;\n\nconst Component = ({ onClick }) => (\n  <WinnerScreen>\n    <h1>Congratulations!</h1>\n    <span>\n      Want to play <button onClick={onClick}>again</button>?\n    </span>\n  </WinnerScreen>\n);\n\nComponent.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Component;\n","import shuffle from \"lodash/shuffle\";\n\n// The number of images in the project, we dont want to go over\n// this maximum amount...\nconst NUM_AVAILABLE_IMAGES = 20;\n\n// Creates the initial game state.\n// @param {number} numberOfCards    The total desired number of cards on the board\n// @param {number} cardsPerSet      The number of cards that must be matched together\n//                                  ie. pairs, triples etc\nexport function createInitalState({ numberOfCards, cardsPerSet }) {\n  if (numberOfCards < 2) {\n    throw new Error(\"number of card should be at least 2\");\n  }\n  if (numberOfCards / cardsPerSet > NUM_AVAILABLE_IMAGES) {\n    throw new Error(\n      \"Not enough images in the project to suppor that many different types of cards!\"\n    );\n  }\n  if (numberOfCards % cardsPerSet !== 0) {\n    throw new Error(\n      \"The number of cards in the set should be evenly divisible into the total amount of cards\"\n    );\n  }\n\n  // Add pairs of cards to the state\n  const cards = [];\n  for (let i = 0; i < numberOfCards; i++) {\n    cards.push({\n      id: i,\n      type: i % (numberOfCards / cardsPerSet),\n      // When a card is 'flipped' it's part of the current play selection\n      flipped: false,\n      // When a card is matched, its full set has been found and its out of play\n      matched: false,\n    });\n  }\n\n  return {\n    // Our card items\n    cards: shuffle(cards),\n    // Whether or not we should respond to card flips\n    interactive: true,\n  };\n}\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case \"RESET\":\n      return createInitalState({\n        numberOfCards: action.numberOfCards,\n        cardsPerSet: action.cardsPerSet,\n      });\n\n    // Flips one card and disables the interactive state\n    case \"FLIP_CARD\":\n      return {\n        ...state,\n        // Disable card flipping until the board has been checked with CHECK_BOARD\n        interactive: false,\n        cards: state.cards.map((card) =>\n          card.id === action.id ? { ...card, flipped: true } : { ...card }\n        ),\n      };\n\n    case \"CHECK_BOARD\":\n      const newState = { ...state, interactive: true };\n\n      const flippedCards = state.cards.filter((card) => card.flipped);\n      const cardsDontMatch = !flippedCards.every(\n        (card, i, cards) => card.type === cards[0].type\n      );\n      const allCardsInSetFlipped = state.cards\n        .filter((card) => card.type === flippedCards[0].type)\n        .every((card) => card.flipped);\n\n      if (cardsDontMatch) {\n        // if any of the flipped cards do not have matching types, unflip all cards\n        return {\n          ...newState,\n          cards: state.cards.map((card) => ({ ...card, flipped: false })),\n        };\n      } else if (allCardsInSetFlipped) {\n        // otherise, if all cards in the set are flipped, mark all as matched\n        return {\n          ...newState,\n          cards: state.cards.map((card) =>\n            card.type === flippedCards[0].type\n              ? { ...card, matched: true, flipped: false }\n              : { ...card }\n          ),\n        };\n      }\n      return newState;\n\n    default:\n      return state;\n  }\n}\n","import React, { useReducer } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"./components/Card\";\nimport Grid from \"./components/Grid\";\nimport WinnerScreen from \"./components/WinnerScreen\";\nimport { reducer, createInitalState } from \"./reducer\";\n\nconst GRID_WIDTH = 5;\nconst GRID_HEIGHT = 4;\nconst CARDS_PER_SET = 2;\n// How long to disable interaction for after clicking, in milliseconds\nconst TIMEMOUT_AFTER_CARD_FLIP = 500;\n\nconst Page = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  const numberOfCards = GRID_WIDTH * GRID_HEIGHT;\n  const [state, dispatch] = useReducer(\n    reducer,\n    { numberOfCards, cardsPerSet: CARDS_PER_SET },\n    createInitalState\n  );\n\n  const cards = state.cards.map((card) => (\n    <Card\n      key={card.id}\n      flipped={card.flipped || card.matched}\n      type={card.type}\n      onClick={async () => {\n        dispatch({ type: \"FLIP_CARD\", id: card.id });\n        await new Promise((resolve) =>\n          setTimeout(resolve, TIMEMOUT_AFTER_CARD_FLIP)\n        );\n        dispatch({ type: \"CHECK_BOARD\" });\n      }}\n      disabled={!state.interactive}\n    />\n  ));\n\n  const gameOver = state.cards.every((card) => card.matched);\n\n  return (\n    <Page>\n      <Grid width={GRID_WIDTH} height={GRID_HEIGHT}>\n        {cards}\n      </Grid>\n      {gameOver && (\n        <WinnerScreen\n          onClick={() => {\n            dispatch({\n              type: \"RESET\",\n              numberOfCards,\n              cardsPerSet: CARDS_PER_SET,\n            });\n          }}\n        />\n      )}\n    </Page>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}